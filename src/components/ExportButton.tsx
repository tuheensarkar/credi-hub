import { Button } from "@/components/ui/button";
import { Download, Share2 } from "lucide-react";
import { toast } from "sonner";
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ExportButtonProps {
  profileData: any;
}

export const ExportButton = ({ profileData }: ExportButtonProps) => {
  const generatePDF = async () => {
    try {
      toast.info("Generating PDF...");
      
      // Create PDF content
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      let currentY = margin;
      
      // Header
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      pdf.text(profileData.ai?.headline || `${profileData.github?.user?.name || 'Developer'} - Profile`, margin, currentY);
      currentY += 15;
      
      // Summary
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      const summaryLines = pdf.splitTextToSize(profileData.ai?.summary || 'No summary available', pageWidth - 2 * margin);
      pdf.text(summaryLines, margin, currentY);
      currentY += summaryLines.length * 5 + 10;
      
      // Professional Level
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Professional Level', margin, currentY);
      currentY += 8;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(profileData.ai?.professionalLevel || 'Not assessed', margin, currentY);
      currentY += 15;
      
      // GitHub Stats
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('GitHub Statistics', margin, currentY);
      currentY += 8;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`• Repositories: ${profileData.github?.user?.public_repos || 0}`, margin, currentY);
      currentY += 6;
      pdf.text(`• Total Stars: ${profileData.github?.totalStars || 0}`, margin, currentY);
      currentY += 6;
      pdf.text(`• Total Forks: ${profileData.github?.totalForks || 0}`, margin, currentY);
      currentY += 6;
      pdf.text(`• Followers: ${profileData.github?.user?.followers || 0}`, margin, currentY);
      currentY += 15;
      
      // LeetCode Stats (if available)
      if (profileData.leetcode?.problemsSolved?.solvedProblem > 0) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('LeetCode Performance', margin, currentY);
        currentY += 8;
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`• Problems Solved: ${profileData.leetcode.problemsSolved.solvedProblem}`, margin, currentY);
        currentY += 6;
        pdf.text(`• Contest Rating: ${profileData.leetcode.contestRating}`, margin, currentY);
        currentY += 6;
        pdf.text(`• Global Rank: ${profileData.leetcode.contestRanking || 'N/A'}`, margin, currentY);
        currentY += 15;
      }
      
      // Skills
      if (profileData.ai?.keySkills?.length > 0) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Key Skills', margin, currentY);
        currentY += 8;
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        const skillsText = profileData.ai.keySkills.join(', ');
        const skillsLines = pdf.splitTextToSize(skillsText, pageWidth - 2 * margin);
        pdf.text(skillsLines, margin, currentY);
        currentY += skillsLines.length * 5 + 10;
      }
      
      // Highlights
      if (profileData.ai?.highlights?.length > 0) {
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Highlights', margin, currentY);
        currentY += 8;
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        profileData.ai.highlights.forEach((highlight: string) => {
          pdf.text(`• ${highlight}`, margin, currentY);
          currentY += 6;
        });
      }
      
      // Footer
      currentY = pdf.internal.pageSize.getHeight() - 20;
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'italic');
      pdf.text(`Generated by DevCredibility - ${new Date().toLocaleDateString()}`, margin, currentY);
      
      // Download PDF
      pdf.save(`${profileData.github?.user?.login || 'developer'}-profile.pdf`);
      toast.success("PDF generated successfully!");
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast.error("Failed to generate PDF");
    }
  };

  const shareProfile = async () => {
    try {
      const url = window.location.href;
      await navigator.clipboard.writeText(url);
      toast.success("Profile link copied to clipboard!");
    } catch (error) {
      toast.error("Failed to copy link");
    }
  };

  return (
    <div className="flex gap-2">
      <Button onClick={generatePDF} className="flex items-center gap-2">
        <Download className="h-4 w-4" />
        Export PDF
      </Button>
      <Button onClick={shareProfile} variant="outline" className="flex items-center gap-2">
        <Share2 className="h-4 w-4" />
        Share Profile
      </Button>
    </div>
  );
};